'scopeName': 'source.sp'
'name': 'Sourcepawn'
'fileTypes': [
  'sp'
  'inc'
  'sma'
]
'patterns': [
  {
    'include': '#preprocessor-rule-enabled'
  }
  {
    'include': '#preprocessor-rule-disabled'
  }
  {
    'include': '#preprocessor-rule-other'
  }
  {
    'include': '#comments'
  }
  {
    'match': '\\b(break|case|continue|default|do|else|for|if|return|switch|while)\\b'
    'name': 'keyword.control.sp'
  }
  {
    'match': '\\b(null|true|false|INVALID_HANDLE|APLRes_Success|APLRes_Failure|APLRes_SilentFailure|Plugin_Continue|Plugin_Changed|Plugin_Handled|Plugin_Stop)\\b'
    'name': 'constant.language.sp'
  }
  {
    'include': '#storage'
  }
  {
    'include': '#sizeof'
  }
  {
    'include': '#numbers'
  }
  {
    'include': '#strings'
  }
  {
    #'match': '(?:^\\w*(?<!case)\\s*|(?:(?=\\s)(?<!case)(?<=\\w)))\\s*(?:\\?|(?<!default):)'
    'match': '\\?|:'
    'name': 'keyword.control.ternary.sp'
  }
  {
    'match': '(<<|>>>?|~|\\^)'
    'name': 'keyword.operator.bitwise.sp'
  }
  {
    'match': '((&|\\^|\\||<<|>>>?)=)'
    'name': 'keyword.operator.assignment.bitwise.sp'
  }
  {
    'match': '(==|!=|<=|>=|<|>)'
    'name': 'keyword.operator.comparison.sp'
  }
  {
    'match': '([+*/%-]=)'
    'name': 'keyword.operator.assignment.arithmetic.sp'
  }
  {
    'match': '(=)'
    'name': 'keyword.operator.assignment.sp'
  }
  {
    'match': '(\\-\\-|\\+\\+)'
    'name': 'keyword.operator.increment-decrement.sp'
  }
  {
    'match': '(\\-|\\+|\\*|\\/|%)'
    'name': 'keyword.operator.arithmetic.sp'
  }
  {
    'match': '(!|&&|\\|\\|)'
    'name': 'keyword.operator.logical.sp'
  }
  {
    'match': '(\\||&)'
    'name': 'keyword.operator.bitwise.sp'
  }
  {
    'match': ';'
    'name': 'punctuation.terminator.sp'
  }
  {
    'match': '\\b([A-Z][A-Z0-9_]+)\\b'
    'name': 'constant.other.sp'
  }
  {
    'begin': '''(?x)
      ^\\s* ((\\#)\\s*define) \\s+     # define
      ((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
      (?:
        (\\()
          (
            \\s* \\g<id> \\s*         # first argument
            ((,) \\s* \\g<id> \\s*)*  # additional arguments
            (?:\\.\\.\\.)?            # varargs ellipsis?
          )
        (\\))
      )?
    '''
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.define.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
      '3':
        'name': 'entity.name.function.preprocessor.sp'
      '5':
        'name': 'punctuation.definition.parameters.begin.sp'
      '6':
        'name': 'variable.parameter.preprocessor.sp'
      '8':
        'name': 'punctuation.separator.parameters.sp'
      '9':
        'name': 'punctuation.definition.parameters.end.sp'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.macro.sp'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  }
  {
    'begin': '^\\s*((#)\\s*(error|warning))\\b'
    'captures':
      '1':
        'name': 'keyword.control.directive.diagnostic.$3.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'end': '(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.diagnostic.sp'
    'patterns': [
      {
        'include': '#line_continuation_character'
      }
    ]
  }
  {
    'begin': '^\\s*((#)\\s*((try)?include))\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.$3.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.include.sp'
    'patterns': [
      {
        'include': '#line_continuation_character'
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.sp'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.sp'
        'name': 'string.quoted.double.include.sp'
      }
      {
        'begin': '<'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.sp'
        'end': '>'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.sp'
        'name': 'string.quoted.other.lt-gt.include.sp'
      }
    ]
  }
  {
    'begin': '^\\s*(?:((#)\\s*(?:elif|else|if|ifdef|ifndef))|((#)\\s*(endinput|pragma|undef)))\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
      '3':
        'name': 'keyword.control.directive.$5.sp'
      '4':
        'name': 'punctuation.definition.directive.sp'
    'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.sp'
    'patterns': [
      {
        'include': '$base'
      }
      {
        'include': '#line_continuation_character'
      }
    ]
  }
  {
    'include': '#block'
  }
  {
    'begin': '''(?x)
      (?:^|(?<=\\*\\/))\\s*
      \\b(forward|native|public|static|stock)?\\b\\s*
      (?!while|for|do|if|else|switch|return|sizeof)
      (?:
        \\b([a-zA-Z_$][a-zA-Z_$0-9]*)\\b\\s*    # newdecl tag system
        |
        \\b([a-zA-Z_$][a-zA-Z_$0-9]*:)?\\b      # legacy tag system
      )
      (?!(?:while|for|do|if|else|switch|return|sizeof)\\s*\\()
      ([a-zA-Z_$][a-zA-Z_$0-9]*)                # actual name
      \\s*(?=\\()
    '''
    'beginCaptures':
      '1':
        'name': 'storage.modifier.sp'
      '2':
        'name': 'storage.type.sp'
      '3':
        'name': 'storage.type.legacy.sp'
      '4':
        'name': 'entity.name.function.sp'
      '5':
        'name': 'punctuation.definition.parameters.sp'
    'end': '(?<=\\})|(?=#)|(;)'
    'name': 'meta.function.sp'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#parens'
      }
      {
        'include': '#block'
      }
    ]
  }
  {
    'match': '\\b(delete)\\b(\\s*\\[\\])?|\\b(new|decl)\\b'
    'name': 'keyword.control.sp'
  }
  {
    'include': '#line_continuation_character'
  }
]
'repository':
  'block':
    'patterns': [
      {
        'begin': '\\{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.sp'
        'end': '\\}|(?=\\s*#\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.sp'
        'name': 'meta.block.sp'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'block_innards':
    'patterns': [
      {
        'include': '#preprocessor-rule-enabled-block'
      }
      {
        'include': '#preprocessor-rule-disabled-block'
      }
      {
        'include': '#preprocessor-rule-other-block'
      }
      {
        'include': '#sizeof'
      }
      {
        'include': '#function_call'
      }
      {
        'include': '#block'
      }
      {
        'include': '$base'
      }
    ]
  'function_call':
    'match': '''(?x)
      (?:(?=\\s)(?:(?<=else|new|return)|(?<!\\w))(\\s+))?
      (?:
        (?!(?:while|for|do|if|else|switch|catch|return|sizeof)\\s*\\()([a-zA-Z_$][a-zA-Z_$0-9]*) # actual name
      )
      \\s*(\\()
    '''
    'captures':
      '1':
        'name': 'punctuation.whitespace.function-call.leading.sp'
      '2':
        'name': 'support.function.any-method.sp'
      '3':
        'name': 'punctuation.definition.parameters.sp'
    'name': 'meta.function-call.sp'
  'comments':
    'patterns': [
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.sp'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.sp'
        'name': 'comment.block.sp'
      }
      {
        'match': '\\*/.*\\n'
        'name': 'invalid.illegal.stray-comment-end.sp'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.sp'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.sp'
            'end': '\\n'
            'name': 'comment.line.double-slash.sp'
            'patterns': [
              {
                'include': '#line_continuation_character'
              }
            ]
          }
        ]
      }
    ]
  'disabled':
    'begin': '^\\s*#\\s*if(n?def)?\\b.*$'
    'end': '^\\s*#\\s*endif\\b'
    'patterns': [
      {
        'include': '#disabled'
      }
    ]
  'line_continuation_character':
    'patterns': [
      {
        'match': '(\\\\)\\s*\\n'
        'captures':
          '1':
            'name': 'constant.character.escape.line-continuation.sp'
      }
    ]
  'numbers':
    'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
    'name': 'constant.numeric.sp'
  'parens':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin.sp'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end.sp'
    'name': 'meta.parens.sp'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'preprocessor-rule-disabled':
    'begin': '^\\s*((#)if)\\s+(0)\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
      '3':
        'name': 'constant.numeric.preprocessor.sp'
    'end': '^\\s*((#)\\s*endif)\\b'
    'endCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'name': 'meta.preprocessor.sp'
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*else)\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.conditional.sp'
          '2':
            'name': 'punctuation.definition.directive.sp'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
      {
        'begin': '\\G'
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'contentName': 'comment.block.preprocessor.if-branch.sp'
        'patterns': [
          {
            'include': '#disabled'
          }
        ]
      }
    ]
  'preprocessor-rule-disabled-block':
    'begin': '^\\s*((#)if)\\s+(0)\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
      '3':
        'name': 'constant.numeric.preprocessor.sp'
    'end': '^\\s*((#)\\s*endif)\\b'
    'endCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'name': 'meta.preprocessor.sp'
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*else)\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.conditional.sp'
          '2':
            'name': 'punctuation.definition.directive.sp'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
      {
        'begin': '\\G'
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'contentName': 'comment.block.preprocessor.if-branch.in-block.sp'
        'patterns': [
          {
            'include': '#disabled'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled':
    'begin': '^\\s*((#)if)\\s+(0*1)\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
      '3':
        'name': 'constant.numeric.preprocessor.sp'
    'end': '^\\s*((#)\\s*endif)\\b'
    'endCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'name': 'meta.preprocessor.sp'
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*else)\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.conditional.sp'
          '2':
            'name': 'punctuation.definition.directive.sp'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'contentName': 'comment.block.preprocessor.else-branch.sp'
        'patterns': [
          {
            'include': '#disabled'
          }
        ]
      }
      {
        'begin': '\\G'
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled-block':
    'begin': '^\\s*((#)if)\\s+(0*1)\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
      '3':
        'name': 'constant.numeric.preprocessor.sp'
    'end': '^\\s*((#)\\s*endif)\\b'
    'endCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'name': 'meta.preprocessor.sp'
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*else)\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.conditional.sp'
          '2':
            'name': 'punctuation.definition.directive.sp'
        'contentName': 'comment.block.preprocessor.else-branch.in-block.sp'
        'end': '(?=^\\s*#\\s*endif\\b)'
        'patterns': [
          {
            'include': '#disabled'
          }
        ]
      }
      {
        'begin': '\\G'
        'end': '(?=^\\s*#\\s*(else|endif)\\b)'
        'patterns': [
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'preprocessor-rule-other':
    'begin': '^\\s*((#)\\s*if(n?def)?)\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'end': '^\\s*((#)\\s*(endif))\\b'
    'endCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'name': 'meta.preprocessor.sp'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'preprocessor-rule-other-block':
    'begin': '^\\s*((#)\\s*if(n?def)?)\\b'
    'beginCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'end': '^\\s*((#)\\s*endif)\\b'
    'endCaptures':
      '1':
        'name': 'keyword.control.directive.conditional.sp'
      '2':
        'name': 'punctuation.definition.directive.sp'
    'name': 'meta.preprocessor.sp'
    'patterns': [
      {
        'include': '#block_innards'
      }
    ]
  'sizeof':
    'match': '\\b(sizeof)\\b'
    'name': 'keyword.operator.sizeof.sp'
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.sp'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.sp'
        'name': 'string.quoted.double.sp'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#string_placeholder'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.sp'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.sp'
        'name': 'string.quoted.single.sp'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\(\\\\|[abefnprtv\'"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{8}|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
        'name': 'constant.character.escape.sp'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unknown-escape.sp'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '(?x)%\n(\\d+\\$)? # field (argument #)\n[#0\\- +\']* # flags\n[,;:_]? # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)? # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)? # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspnNLtT%] # conversion type'
        'name': 'constant.other.placeholder.sp'
      }
      {
        'match': '%'
        'name': 'invalid.illegal.placeholder.sp'
      }
    ]
  'storage':
    'patterns': [
      {
        #This can probably be cleaned up considerably, but it'll have to do for now
        #'match': '(?:^\\w*(?<!case)\\s*|=|>|<|\\(|,\\s*|(?:(?=\\s)(?<!case)(?<=\\w)))\\s*\\b([A-Za-z_]\\w*)(?<!default)\\b(:)'
        'match': '\\b([A-Za-z_]\\w*)\\b(:)'
        'comment': 'Pre-1.7'
        'name': 'storage.type.legacy.sp'
      }
      {
        'match': '\\b(any|bool|char|enum|double|float|int|struct|typeset|void|Action|Handle|ConVar|KeyValues|Plugin|StringMap|TopMenu|APLRes)\\b(?!:)'
        'comment': 'SM 1.7+'
        'name': 'storage.type.sp'
      }
      {
        'match': '\\b(const|final)\\b'
        'name': 'storage.modifier.sp'
      }
    ]
